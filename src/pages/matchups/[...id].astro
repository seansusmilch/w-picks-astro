---
import Layout from '@/layouts/Layout.astro';
import Matchup from '@/components/Matchup.astro';
import { PickForm } from '@/components/Picks/PickForm';
import { TeamMap } from '@/components/NBA/teamMap';
import { MatchupZ, PickZ } from '@/lib/definitions';
import { z } from 'astro:content';

const { pb, apb, user } = Astro.locals;
const { id } = Astro.params;

const PickFormZ = PickZ.omit({ win_prediction: true, id: true }).extend({
  win_prediction: z.string(),
  id: z.string(),
});

if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  console.log(`id "${formData.get('pick_id')}"`);
  const pickData = PickFormZ.safeParse({
    id: formData.get('pick_id'),
    user: user.record.id,
    matchup: id,
    win_prediction: formData.get('win_prediction'),
    comment: formData.get('comment'),
  });

  try {
    if (!pickData.success) {
      console.error('Invalid pick data:', pickData.error);
      throw new Error(
        `Invalid pick data: ${JSON.stringify(pickData.error.issues)}`
      );
    }
    if (pickData.data.id) {
      if (pickData.data.win_prediction === 'indeterminate') {
        await pb.collection('picks').delete(pickData.data.id);
      } else
        await pb.collection('picks').update(pickData.data.id, pickData.data);
    } else {
      await pb.collection('picks').create(pickData.data);
    }
  } catch (e) {
    console.error('Error saving pick:', e);
  } finally {
    return Astro.redirect(`/matchups/${id}`);
  }
}

const matchupRaw = await pb.collection('matchups').getOne(id);
if (!matchupRaw) return Astro.redirect('/404');

const matchupResult = MatchupZ.safeParse(matchupRaw);
if (!matchupResult.success) {
  console.error('Invalid matchup data:', matchupResult.error);
  return;
}
const matchup = matchupResult.data;

const { away_code, home_code } = matchupResult.data;
const title = `${TeamMap[away_code].name_short} at ${TeamMap[home_code].name_short}`;

const picks = await pb.collection('picks').getList(1, 30, {
  filter: pb.filter('matchup = {:id}', { id: matchup.id }),
});

let userPick = null;
if (user) {
  const userPickRaw = picks.items.find((p) => p.user === user.record.id);
  const pickResult = PickZ.safeParse(userPickRaw);
  if (pickResult.success) {
    userPick = pickResult.data;
  }
}
---

<Layout title={title}>
  <Matchup matchup={matchup} />
  <PickForm matchup={matchup} pick={userPick} client:load />
</Layout>
