---
import Layout from '@/layouts/Layout.astro';
import Matchup from '@/components/Matchup/Matchup.astro';
import { PickForm } from '@/components/Picks/PickForm';
import { TeamMap } from '@/components/NBA/teamMap';
import { MatchupZ } from '@/lib/definitions';
import { PickTable } from '@/components/Picks/PickTable';
import { getUserAvatarUrl } from '@/lib/data_common';

const { pb, apb, user } = Astro.locals;
const { id } = Astro.params;

const matchupRaw = await pb.collection('matchups').getOne(id);
if (!matchupRaw) return Astro.redirect('/404');

const matchupResult = MatchupZ.safeParse(matchupRaw);
if (!matchupResult.success) {
  console.error('Invalid matchup data:', matchupResult.error);
  return;
}
const matchup = matchupResult.data;

const { away_code, home_code } = matchupResult.data;
const title = `${TeamMap[away_code].name_short} at ${TeamMap[home_code].name_short}`;

const picksResponse = await apb.collection('picks').getList(1, 30, {
  filter: pb.filter('matchup = {:id}', { id: matchup.id }),
  expand: 'user',
  fields: '*,expand.user.id,expand.user.avatar,expand.user.username',
});

const picksResults = picksResponse.items.map((p) => {
  p.expand.user.avatar_url = getUserAvatarUrl(
    p.expand.user.id,
    p.expand.user.avatar
  );
  return p;
});

console.log('picksResults:', JSON.stringify(picksResults, null, 4));

let userPick = null;
if (user) {
  const userPickRaw = picksResults.find((p) => p.user === user.record.id);
  userPick = userPickRaw;
}
---

<Layout title={title}>
  <div class='flex flex-col gap-4'>
    <Matchup matchup={matchup} />
    <PickTable matchup={matchup} picks={picksResults} client:load />
    <PickForm matchup={matchup} pick={userPick} client:load />
  </div>
</Layout>
